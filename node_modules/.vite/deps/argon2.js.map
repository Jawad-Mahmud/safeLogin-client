{
  "version": 3,
  "sources": ["browser-external:node:assert", "browser-external:node:crypto", "browser-external:node:util", "../../../../../safeLogin-server/node_modules/@phc/format/index.js", "browser-external:os", "../../../../../safeLogin-server/node_modules/node-gyp-build/node-gyp-build.js", "../../../../../safeLogin-server/node_modules/node-gyp-build/index.js", "../../../../../safeLogin-server/node_modules/argon2/argon2.cjs"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:assert\" has been externalized for browser compatibility. Cannot access \"node:assert.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:crypto\" has been externalized for browser compatibility. Cannot access \"node:crypto.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:util\" has been externalized for browser compatibility. Cannot access \"node:util.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "const idRegex = /^[a-z0-9-]{1,32}$/;\nconst nameRegex = /^[a-z0-9-]{1,32}$/;\nconst valueRegex = /^[a-zA-Z0-9/+.-]+$/;\nconst b64Regex = /^([a-zA-Z0-9/+.-]+|)$/;\nconst decimalRegex = /^((-)?[1-9]\\d*|0)$/;\nconst versionRegex = /^v=(\\d+)$/;\n\nfunction objToKeyVal(obj) {\n  return objectKeys(obj)\n    .map(k => [k, obj[k]].join('='))\n    .join(',');\n}\n\nfunction keyValtoObj(str) {\n  const obj = {};\n  str.split(',').forEach(ps => {\n    const pss = ps.split('=');\n    if (pss.length < 2) {\n      throw new TypeError(`params must be in the format name=value`);\n    }\n\n    obj[pss.shift()] = pss.join('=');\n  });\n  return obj;\n}\n\nfunction objectKeys(object) {\n  /* istanbul ignore next */\n  return Object.keys(object);\n}\n\nfunction objectValues(object) {\n  /* istanbul ignore next */\n  if (typeof Object.values === 'function') return Object.values(object);\n  /* istanbul ignore next */\n  return objectKeys(object).map(k => object[k]);\n}\n\n/**\n * Generates a PHC string using the data provided.\n * @param  {Object} opts Object that holds the data needed to generate the PHC\n * string.\n * @param  {string} opts.id Symbolic name for the function.\n * @param  {Number} [opts.version] The version of the function.\n * @param  {Object} [opts.params] Parameters of the function.\n * @param  {Buffer} [opts.salt] The salt as a binary buffer.\n * @param  {Buffer} [opts.hash] The hash as a binary buffer.\n * @return {string} The hash string adhering to the PHC format.\n */\nfunction serialize(opts) {\n  const fields = [''];\n\n  if (typeof opts !== 'object' || opts === null) {\n    throw new TypeError('opts must be an object');\n  }\n\n  // Identifier Validation\n  if (typeof opts.id !== 'string') {\n    throw new TypeError('id must be a string');\n  }\n\n  if (!idRegex.test(opts.id)) {\n    throw new TypeError(`id must satisfy ${idRegex}`);\n  }\n\n  fields.push(opts.id);\n\n  if (typeof opts.version !== 'undefined') {\n    if (\n      typeof opts.version !== 'number' ||\n      opts.version < 0 ||\n      !Number.isInteger(opts.version)\n    ) {\n      throw new TypeError('version must be a positive integer number');\n    }\n\n    fields.push(`v=${opts.version}`);\n  }\n\n  // Parameters Validation\n  if (typeof opts.params !== 'undefined') {\n    if (typeof opts.params !== 'object' || opts.params === null) {\n      throw new TypeError('params must be an object');\n    }\n\n    const pk = objectKeys(opts.params);\n    if (!pk.every(p => nameRegex.test(p))) {\n      throw new TypeError(`params names must satisfy ${nameRegex}`);\n    }\n\n    // Convert Numbers into Numeric Strings and Buffers into B64 encoded strings.\n    pk.forEach(k => {\n      if (typeof opts.params[k] === 'number') {\n        opts.params[k] = opts.params[k].toString();\n      } else if (Buffer.isBuffer(opts.params[k])) {\n        opts.params[k] = opts.params[k].toString('base64').split('=')[0];\n      }\n    });\n    const pv = objectValues(opts.params);\n    if (!pv.every(v => typeof v === 'string')) {\n      throw new TypeError('params values must be strings');\n    }\n\n    if (!pv.every(v => valueRegex.test(v))) {\n      throw new TypeError(`params values must satisfy ${valueRegex}`);\n    }\n\n    const strpar = objToKeyVal(opts.params);\n    fields.push(strpar);\n  }\n\n  if (typeof opts.salt !== 'undefined') {\n    // Salt Validation\n    if (!Buffer.isBuffer(opts.salt)) {\n      throw new TypeError('salt must be a Buffer');\n    }\n\n    fields.push(opts.salt.toString('base64').split('=')[0]);\n\n    if (typeof opts.hash !== 'undefined') {\n      // Hash Validation\n      if (!Buffer.isBuffer(opts.hash)) {\n        throw new TypeError('hash must be a Buffer');\n      }\n\n      fields.push(opts.hash.toString('base64').split('=')[0]);\n    }\n  }\n\n  // Create the PHC formatted string\n  const phcstr = fields.join('$');\n\n  return phcstr;\n}\n\n/**\n * Parses data from a PHC string.\n * @param  {string} phcstr A PHC string to parse.\n * @return {Object} The object containing the data parsed from the PHC string.\n */\nfunction deserialize(phcstr) {\n  if (typeof phcstr !== 'string' || phcstr === '') {\n    throw new TypeError('pchstr must be a non-empty string');\n  }\n\n  if (phcstr[0] !== '$') {\n    throw new TypeError('pchstr must contain a $ as first char');\n  }\n\n  const fields = phcstr.split('$');\n  // Remove first empty $\n  fields.shift();\n\n  // Parse Fields\n  let maxf = 5;\n  if (!versionRegex.test(fields[1])) maxf--;\n  if (fields.length > maxf) {\n    throw new TypeError(\n      `pchstr contains too many fileds: ${fields.length}/${maxf}`\n    );\n  }\n\n  // Parse Identifier\n  const id = fields.shift();\n  if (!idRegex.test(id)) {\n    throw new TypeError(`id must satisfy ${idRegex}`);\n  }\n\n  let version;\n  // Parse Version\n  if (versionRegex.test(fields[0])) {\n    version = parseInt(fields.shift().match(versionRegex)[1], 10);\n  }\n\n  let hash;\n  let salt;\n  if (b64Regex.test(fields[fields.length - 1])) {\n    if (fields.length > 1 && b64Regex.test(fields[fields.length - 2])) {\n      // Parse Hash\n      hash = Buffer.from(fields.pop(), 'base64');\n      // Parse Salt\n      salt = Buffer.from(fields.pop(), 'base64');\n    } else {\n      // Parse Salt\n      salt = Buffer.from(fields.pop(), 'base64');\n    }\n  }\n\n  // Parse Parameters\n  let params;\n  if (fields.length > 0) {\n    const parstr = fields.pop();\n    params = keyValtoObj(parstr);\n    if (!objectKeys(params).every(p => nameRegex.test(p))) {\n      throw new TypeError(`params names must satisfy ${nameRegex}`);\n    }\n\n    const pv = objectValues(params);\n    if (!pv.every(v => valueRegex.test(v))) {\n      throw new TypeError(`params values must satisfy ${valueRegex}`);\n    }\n\n    const pk = objectKeys(params);\n    // Convert Decimal Strings into Numbers\n    pk.forEach(k => {\n      params[k] = decimalRegex.test(params[k])\n        ? parseInt(params[k], 10)\n        : params[k];\n    });\n  }\n\n  if (fields.length > 0) {\n    throw new TypeError(`pchstr contains unrecognized fileds: ${fields}`);\n  }\n\n  // Build the output object\n  const phcobj = {id};\n  if (version) phcobj.version = version;\n  if (params) phcobj.params = params;\n  if (salt) phcobj.salt = salt;\n  if (hash) phcobj.hash = hash;\n\n  return phcobj;\n}\n\nmodule.exports = {\n  serialize,\n  deserialize\n};\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"os\" has been externalized for browser compatibility. Cannot access \"os.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "var fs = require('fs')\nvar path = require('path')\nvar os = require('os')\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\n\nvar vars = (process.config && process.config.variables) || {}\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY\nvar abi = process.versions.modules // TODO: support old node where this is undef\nvar runtime = isElectron() ? 'electron' : (isNwjs() ? 'node-webkit' : 'node')\n\nvar arch = process.env.npm_config_arch || os.arch()\nvar platform = process.env.npm_config_platform || os.platform()\nvar libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc')\nvar armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || ''\nvar uv = (process.versions.uv || '').split('.')[0]\n\nmodule.exports = load\n\nfunction load (dir) {\n  return runtimeRequire(load.resolve(dir))\n}\n\nload.resolve = load.path = function (dir) {\n  dir = path.resolve(dir || '.')\n\n  try {\n    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_')\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD']\n  } catch (err) {}\n\n  if (!prebuildsOnly) {\n    var release = getFirst(path.join(dir, 'build/Release'), matchBuild)\n    if (release) return release\n\n    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild)\n    if (debug) return debug\n  }\n\n  var prebuild = resolve(dir)\n  if (prebuild) return prebuild\n\n  var nearby = resolve(path.dirname(process.execPath))\n  if (nearby) return nearby\n\n  var target = [\n    'platform=' + platform,\n    'arch=' + arch,\n    'runtime=' + runtime,\n    'abi=' + abi,\n    'uv=' + uv,\n    armv ? 'armv=' + armv : '',\n    'libc=' + libc,\n    'node=' + process.versions.node,\n    process.versions.electron ? 'electron=' + process.versions.electron : '',\n    typeof __webpack_require__ === 'function' ? 'webpack=true' : '' // eslint-disable-line\n  ].filter(Boolean).join(' ')\n\n  throw new Error('No native build was found for ' + target + '\\n    loaded from: ' + dir + '\\n')\n\n  function resolve (dir) {\n    // Find matching \"prebuilds/<platform>-<arch>\" directory\n    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple)\n    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0]\n    if (!tuple) return\n\n    // Find most specific flavor first\n    var prebuilds = path.join(dir, 'prebuilds', tuple.name)\n    var parsed = readdirSync(prebuilds).map(parseTags)\n    var candidates = parsed.filter(matchTags(runtime, abi))\n    var winner = candidates.sort(compareTags(runtime))[0]\n    if (winner) return path.join(prebuilds, winner.file)\n  }\n}\n\nfunction readdirSync (dir) {\n  try {\n    return fs.readdirSync(dir)\n  } catch (err) {\n    return []\n  }\n}\n\nfunction getFirst (dir, filter) {\n  var files = readdirSync(dir).filter(filter)\n  return files[0] && path.join(dir, files[0])\n}\n\nfunction matchBuild (name) {\n  return /\\.node$/.test(name)\n}\n\nfunction parseTuple (name) {\n  // Example: darwin-x64+arm64\n  var arr = name.split('-')\n  if (arr.length !== 2) return\n\n  var platform = arr[0]\n  var architectures = arr[1].split('+')\n\n  if (!platform) return\n  if (!architectures.length) return\n  if (!architectures.every(Boolean)) return\n\n  return { name, platform, architectures }\n}\n\nfunction matchTuple (platform, arch) {\n  return function (tuple) {\n    if (tuple == null) return false\n    if (tuple.platform !== platform) return false\n    return tuple.architectures.includes(arch)\n  }\n}\n\nfunction compareTuples (a, b) {\n  // Prefer single-arch prebuilds over multi-arch\n  return a.architectures.length - b.architectures.length\n}\n\nfunction parseTags (file) {\n  var arr = file.split('.')\n  var extension = arr.pop()\n  var tags = { file: file, specificity: 0 }\n\n  if (extension !== 'node') return\n\n  for (var i = 0; i < arr.length; i++) {\n    var tag = arr[i]\n\n    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {\n      tags.runtime = tag\n    } else if (tag === 'napi') {\n      tags.napi = true\n    } else if (tag.slice(0, 3) === 'abi') {\n      tags.abi = tag.slice(3)\n    } else if (tag.slice(0, 2) === 'uv') {\n      tags.uv = tag.slice(2)\n    } else if (tag.slice(0, 4) === 'armv') {\n      tags.armv = tag.slice(4)\n    } else if (tag === 'glibc' || tag === 'musl') {\n      tags.libc = tag\n    } else {\n      continue\n    }\n\n    tags.specificity++\n  }\n\n  return tags\n}\n\nfunction matchTags (runtime, abi) {\n  return function (tags) {\n    if (tags == null) return false\n    if (tags.runtime && tags.runtime !== runtime && !runtimeAgnostic(tags)) return false\n    if (tags.abi && tags.abi !== abi && !tags.napi) return false\n    if (tags.uv && tags.uv !== uv) return false\n    if (tags.armv && tags.armv !== armv) return false\n    if (tags.libc && tags.libc !== libc) return false\n\n    return true\n  }\n}\n\nfunction runtimeAgnostic (tags) {\n  return tags.runtime === 'node' && tags.napi\n}\n\nfunction compareTags (runtime) {\n  // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n  return function (a, b) {\n    if (a.runtime !== b.runtime) {\n      return a.runtime === runtime ? -1 : 1\n    } else if (a.abi !== b.abi) {\n      return a.abi ? -1 : 1\n    } else if (a.specificity !== b.specificity) {\n      return a.specificity > b.specificity ? -1 : 1\n    } else {\n      return 0\n    }\n  }\n}\n\nfunction isNwjs () {\n  return !!(process.versions && process.versions.nw)\n}\n\nfunction isElectron () {\n  if (process.versions && process.versions.electron) return true\n  if (process.env.ELECTRON_RUN_AS_NODE) return true\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'\n}\n\nfunction isAlpine (platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags\nload.matchTags = matchTags\nload.compareTags = compareTags\nload.parseTuple = parseTuple\nload.matchTuple = matchTuple\nload.compareTuples = compareTuples\n", "const runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\nif (typeof runtimeRequire.addon === 'function') { // if the platform supports native resolving prefer that\n  module.exports = runtimeRequire.addon.bind(runtimeRequire)\n} else { // else use the runtime version here\n  module.exports = require('./node-gyp-build.js')\n}\n", "const assert = require(\"node:assert\");\nconst { randomBytes, timingSafeEqual } = require(\"node:crypto\");\nconst { promisify } = require(\"node:util\");\nconst { deserialize, serialize } = require(\"@phc/format\");\nconst gypBuild = require(\"node-gyp-build\");\n\nconst { hash: bindingsHash } = gypBuild(__dirname);\n\n/** @type {(size: number) => Promise<Buffer>} */\nconst generateSalt = promisify(randomBytes);\n\nconst argon2d = 0;\nconst argon2i = 1;\nconst argon2id = 2;\n\nmodule.exports.argon2d = argon2d;\nmodule.exports.argon2i = argon2i;\nmodule.exports.argon2id = argon2id;\n\n/** @enum {argon2i | argon2d | argon2id} */\nconst types = Object.freeze({ argon2d, argon2i, argon2id });\n\n/** @enum {'argon2d' | 'argon2i' | 'argon2id'} */\nconst names = Object.freeze({\n  [types.argon2d]: \"argon2d\",\n  [types.argon2i]: \"argon2i\",\n  [types.argon2id]: \"argon2id\",\n});\n\nconst defaults = {\n  hashLength: 32,\n  timeCost: 3,\n  memoryCost: 1 << 16,\n  parallelism: 4,\n  type: argon2id,\n  version: 0x13,\n};\n\n/**\n * @typedef {Object} Options\n * @property {number} [hashLength=32]\n * @property {number} [timeCost=3]\n * @property {number} [memoryCost=65536]\n * @property {number} [parallelism=4]\n * @property {keyof typeof names} [type=argon2id]\n * @property {number} [version=19]\n * @property {Buffer} [salt]\n * @property {Buffer} [associatedData]\n * @property {Buffer} [secret]\n */\n\n/**\n * Hashes a password with Argon2, producing a raw hash\n *\n * @overload\n * @param {Buffer | string} password The plaintext password to be hashed\n * @param {Options & { raw: true }} options The parameters for Argon2\n * @returns {Promise<Buffer>} The raw hash generated from `password`\n */\n/**\n * Hashes a password with Argon2, producing an encoded hash\n *\n * @overload\n * @param {Buffer | string} password The plaintext password to be hashed\n * @param {Options & { raw?: boolean }} [options] The parameters for Argon2\n * @returns {Promise<string>} The encoded hash generated from `password`\n */\n/**\n * @param {Buffer | string} password The plaintext password to be hashed\n * @param {Options & { raw?: boolean }} [options] The parameters for Argon2\n */\nasync function hash(password, options) {\n  let { raw, salt, ...rest } = { ...defaults, ...options };\n\n  if (rest.hashLength > 2 ** 32 - 1) {\n    throw new RangeError(\"Hash length is too large\");\n  }\n\n  if (rest.memoryCost > 2 ** 32 - 1) {\n    throw new RangeError(\"Memory cost is too large\");\n  }\n\n  if (rest.timeCost > 2 ** 32 - 1) {\n    throw new RangeError(\"Time cost is too large\");\n  }\n\n  if (rest.parallelism > 2 ** 24 - 1) {\n    throw new RangeError(\"Parallelism is too large\");\n  }\n\n  salt = salt ?? (await generateSalt(16));\n\n  const {\n    hashLength,\n    secret = Buffer.alloc(0),\n    type,\n    version,\n    memoryCost: m,\n    timeCost: t,\n    parallelism: p,\n    associatedData: data = Buffer.alloc(0),\n  } = rest;\n\n  const hash = await bindingsHash({\n    password: Buffer.from(password),\n    salt,\n    secret,\n    data,\n    hashLength,\n    m,\n    t,\n    p,\n    version,\n    type,\n  });\n  if (raw) {\n    return hash;\n  }\n\n  return serialize({\n    id: names[type],\n    version,\n    params: { m, t, p, ...(data.byteLength > 0 ? { data } : {}) },\n    salt,\n    hash,\n  });\n}\nmodule.exports.hash = hash;\n\n/**\n * @param {string} digest The digest to be checked\n * @param {Object} [options] The current parameters for Argon2\n * @param {number} [options.timeCost=3]\n * @param {number} [options.memoryCost=65536]\n * @param {number} [options.parallelism=4]\n * @param {number} [options.version=0x13]\n * @returns {boolean} `true` if the digest parameters do not match the parameters in `options`, otherwise `false`\n */\nfunction needsRehash(digest, options = {}) {\n  const { memoryCost, timeCost, parallelism, version } = {\n    ...defaults,\n    ...options,\n  };\n\n  const {\n    version: v,\n    params: { m, t, p },\n  } = deserialize(digest);\n\n  return (\n    +v !== +version ||\n    +m !== +memoryCost ||\n    +t !== +timeCost ||\n    +p !== +parallelism\n  );\n}\nmodule.exports.needsRehash = needsRehash;\n\n/**\n * @param {string} digest The digest to be checked\n * @param {Buffer | string} password The plaintext password to be verified\n * @param {Object} [options] The current parameters for Argon2\n * @param {Buffer} [options.secret]\n * @returns {Promise<boolean>} `true` if the digest parameters matches the hash generated from `password`, otherwise `false`\n */\nasync function verify(digest, password, options = {}) {\n  const { id, ...rest } = deserialize(digest);\n  if (!(id in types)) {\n    return false;\n  }\n\n  const {\n    version = 0x10,\n    params: { m, t, p, data = \"\" },\n    salt,\n    hash,\n  } = rest;\n\n  const { secret = Buffer.alloc(0) } = options;\n\n  return timingSafeEqual(\n    await bindingsHash({\n      password: Buffer.from(password),\n      salt,\n      secret,\n      data: Buffer.from(data, \"base64\"),\n      hashLength: hash.byteLength,\n      m: +m,\n      t: +t,\n      p: +p,\n      version: +version,\n      type: types[id],\n    }),\n    hash,\n  );\n}\nmodule.exports.verify = verify;\n"],
  "mappings": "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",
  "names": ["dir", "platform", "arch", "runtime", "abi", "require_node_gyp_build", "hash"]
}
